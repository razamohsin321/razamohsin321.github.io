---
title: "Random report"
author: 
  - name: Jane Doe
    orcid: 0000-0001-2345-6789
    corresponding: true
    email: Jane.Doe@example.org
    
---

<!-- 

# Instructions for the exercise

1. Move the file to the top level of your repository
2. Update the file _quarto.yml in your repository to include the report in your webpage
3. Load a dataset from https://github.com/Hezel2000/GeoCosmoChemDataAndTools/tree/main/csv
4. Update the YAML header of this file
5. Create a file `requirements.txt`on the top level of the repo
5. Update the CI/CD pipeline as instructed below
6. Create a short report, including plots created from the dataset (they can be interactive if you want -- the result is a webpage)
  a. Don't forget to update the `requirements.txt`with the libraries you call.  
  b. You are welcome to write and test any Python code elsewhere before including it in the report. 
  c. You might find the following pages useful for reference: 
      Figures: https://quarto.org/docs/authoring/figures.html
      Tables: https://quarto.org/docs/authoring/tables.html

The remainder of the document is a small example of how it might look like and provides some help to get started. Don't forget to compare the unrendered and the rendered version! 

By the way, to include Python code, write `python` instead of `r` in the curly brackets at the top of a code chunk. 

# Updating the CI/CD pipline

Add between lines 15 and 16: 

      - name: Install Python and Dependencies
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
      - run: pip install -r requirements.txt 

Make sure identations are correct! 

--> 

## The randomness of R

Because there must be some content for inspiration, let's see how random random numbers in R really are. 

## Uniformly distributed random numbers

Uniformly distributed random number means that all number have the same chance to get drawn from the pool. There are multiple methods to produce such numbers. 

The most common command to create a uniform distribution of random numbers in R is `runif()`, standing for **r**andom **unif**orm. There is also the command `sample()` which is a bit more complex and therefore not further discussed here. 

By default, `runif()` samples the range from 0 to 1: 

``` {python}
import matplotlib.pyplot as plt
filePath = 'https://raw.githubusercontent.com/Hezel2000/GeoCosmoChemDataAndTools/refs/heads/main/csv/Baical%20Rift%20Zone.csv'
with open(filePath, 'r') as file:
    fileString = file.read()
runif(1)

runif(10)

``` 

